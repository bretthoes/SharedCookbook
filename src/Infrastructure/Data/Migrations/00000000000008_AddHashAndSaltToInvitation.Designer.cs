// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharedCookbook.Infrastructure.Data;

#nullable disable

namespace SharedCookbook.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("00000000000008_AddHashAndSaltToInvitation")]
    partial class AddHashAndSaltToInvitation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Cookbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_cookbook_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_cookbook_creator__created_by");

                    b.ToTable("cookbook", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_invitation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CookbookId")
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea")
                        .HasColumnName("hash");

                    b.Property<string>("InvitationStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invitation_status");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RecipientPersonId")
                        .HasColumnType("text")
                        .HasColumnName("recipient_person_id");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("response_date");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("PK_cookbook_invitation_id");

                    b.HasIndex(new[] { "CookbookId" }, "IX_cookbook_invitation__cookbook_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_cookbook_invitation__created_by");

                    b.HasIndex(new[] { "RecipientPersonId" }, "IX_cookbook_invitation__recipient_person_id");

                    b.ToTable("cookbook_invitation", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_member_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAddRecipe")
                        .HasColumnType("boolean")
                        .HasColumnName("can_add_recipe");

                    b.Property<bool>("CanDeleteRecipe")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete_recipe");

                    b.Property<bool>("CanEditCookbookDetails")
                        .HasColumnType("boolean")
                        .HasColumnName("can_edit_cookbook_details");

                    b.Property<bool>("CanRemoveMember")
                        .HasColumnType("boolean")
                        .HasColumnName("can_remove_member");

                    b.Property<bool>("CanSendInvite")
                        .HasColumnType("boolean")
                        .HasColumnName("can_send_invite");

                    b.Property<bool>("CanUpdateRecipe")
                        .HasColumnType("boolean")
                        .HasColumnName("can_update_recipe");

                    b.Property<int>("CookbookId")
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("boolean")
                        .HasColumnName("is_creator");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_cookbook_member_id");

                    b.HasIndex(new[] { "CookbookId" }, "IX_cookbook_member__cookbook_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_cookbook_member__created_by");

                    b.ToTable("cookbook_member", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action_type");

                    b.Property<int?>("CookbookId")
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("PK_cookbook_notification_id");

                    b.HasIndex(new[] { "CookbookId" }, "IX_cookbook_notification__cookbook_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_cookbook_notification__created_by");

                    b.HasIndex(new[] { "RecipeId" }, "IX_cookbook_notification__recipe_id");

                    b.ToTable("cookbook_notification", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ingredient_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_ingredient_category_id");

                    b.HasIndex(new[] { "RecipeId" }, "IX_ingredient__category_recipe_id");

                    b.ToTable("ingredient_category", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BakingTimeInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("baking_time_in_minutes");

                    b.Property<int>("CookbookId")
                        .HasColumnType("integer")
                        .HasColumnName("cookbook_id");

                    b.Property<int?>("CookingTimeInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("cooking_time_in_minutes");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCheap")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDairyFree")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGlutenFree")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsHealthy")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLowFodmap")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVegan")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVegetarian")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("PreparationTimeInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("preparation_time_in_minutes");

                    b.Property<int?>("Servings")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("summary");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("video_path");

                    b.HasKey("Id")
                        .HasName("PK_recipe_id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "CookbookId" }, "IX_recipe__cookbook_id");

                    b.ToTable("recipe", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_direction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("image");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PK_recipe_direction_id");

                    b.HasIndex(new[] { "RecipeId" }, "IX_recipe_direction__recipe_id");

                    b.ToTable("recipe_direction", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("name");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("PK_recipe_image_id");

                    b.HasIndex(new[] { "RecipeId" }, "IX_recipe_image__recipe_id");

                    b.ToTable("recipe_image", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_ingredient_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool>("Optional")
                        .HasColumnType("boolean")
                        .HasColumnName("optional");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("PK_recipe_ingredient_id");

                    b.HasIndex(new[] { "RecipeId" }, "IX_recipe_ingredient__recipe_id");

                    b.ToTable("recipe_ingredient", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_nutrition_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Calories")
                        .HasColumnType("integer")
                        .HasColumnName("calories");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("integer")
                        .HasColumnName("carbohydrates");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Fat")
                        .HasColumnType("integer")
                        .HasColumnName("fat");

                    b.Property<int?>("Fiber")
                        .HasColumnType("integer")
                        .HasColumnName("fiber");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Protein")
                        .HasColumnType("integer")
                        .HasColumnName("protein");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<int?>("Sodium")
                        .HasColumnType("integer")
                        .HasColumnName("sodium");

                    b.Property<int?>("Sugar")
                        .HasColumnType("integer")
                        .HasColumnName("sugar");

                    b.HasKey("Id")
                        .HasName("PK_recipe_nutrition_id");

                    b.HasIndex("RecipeId")
                        .IsUnique();

                    b.HasIndex(new[] { "RecipeId" }, "IX_recipe_nutrition__recipe_id");

                    b.ToTable("recipe_nutrition", (string)null);
                });

            modelBuilder.Entity("SharedCookbook.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Cookbook", b =>
                {
                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("Cookbooks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_cookbook__created_by");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookInvitation", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("Invitations")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_cookbook_invitation__cookbook_id");

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("SentInvitations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_cookbook_invitation__created_by");

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("RecipientPersonId")
                        .HasConstraintName("FK_cookbook_invitation__recipient_person_id");

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookMembership", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("Memberships")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_cookbook_member__cookbook_id");

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("CookbookMemberships")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_cookbook_member__created_by");

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.CookbookNotification", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("Notifications")
                        .HasForeignKey("CookbookId")
                        .HasConstraintName("FK_cookbook_notification__cookbook_id");

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("CookbookNotifications")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_cookbook_notification__created_by");

                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", "Recipe")
                        .WithMany("CookbookNotifications")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK_cookbook_notification__recipe_id");

                    b.Navigation("Cookbook");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.IngredientCategory", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", null)
                        .WithMany("IngredientCategories")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ingredient_category__recipe_id");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Cookbook", "Cookbook")
                        .WithMany("Recipes")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_recipe__cookbook_id");

                    b.HasOne("SharedCookbook.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_recipe__created_by");

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeDirection", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", null)
                        .WithMany("Directions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_recipe_direction__recipe_id");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeImage", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", null)
                        .WithMany("Images")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_recipe_image__recipe_id");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_recipe_ingredient__recipe_id");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.RecipeNutrition", b =>
                {
                    b.HasOne("SharedCookbook.Domain.Entities.Recipe", null)
                        .WithOne("Nutrition")
                        .HasForeignKey("SharedCookbook.Domain.Entities.RecipeNutrition", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_recipe_nutrition__recipe_id");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Cookbook", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Memberships");

                    b.Navigation("Notifications");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("SharedCookbook.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("CookbookNotifications");

                    b.Navigation("Directions");

                    b.Navigation("Images");

                    b.Navigation("IngredientCategories");

                    b.Navigation("Ingredients");

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("SharedCookbook.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Navigation("CookbookMemberships");

                    b.Navigation("CookbookNotifications");

                    b.Navigation("Cookbooks");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("Recipes");

                    b.Navigation("SentInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
